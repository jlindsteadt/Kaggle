{
    "collab_server" : "",
    "contents" : "#### DATA INPUT\nlibrary('dplyr') # data manipulation\nlibrary(kernlab)\nlibrary(ggplot2)\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\n\n\n#Load Test and Train data sets & combine to create 'full' data set\ntest_data <- read.csv(\"titanic_test.csv\", stringsAsFactors = TRUE, header = TRUE)\ntrain_data <- read.csv(\"titanic_train.csv\", stringsAsFactors = TRUE, header = TRUE)\nfull <- bind_rows(test_data, train_data)\nset.seed(123)\n\nstr(full)\n\n\n############# Data Engineering   ################\n#Find NA values for each variable\nna_matrix <- as.matrix(rep(0, ncol(full)))\nrownames(na_matrix) <- colnames(full)\nfor(i in 1:ncol(full)){\n  na_matrix[i] <- length(full[,i][which(is.na(full[,i])==TRUE)])\n}\nna_matrix\n\n\n#Expolore Age data\n# create a new data set age\nage <- full$Age\nn = length(age)\n# replace missing value with a random sample from raw data\n\nfor(i in 1:n){\n  if(is.na(age[i])){\n    age[i] = sample(na.omit(full$Age),1)\n  }\n}\n# check effect\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Before Replacement', \n     col='lightblue', ylim=c(0,0.04),xlab = \"age\")\nhist(age, freq=F, main='After Replacement', \n     col='darkblue', ylim=c(0,0.04))\n\n#Insert sample data into Age data\nfull$Age <- age\n\n\n\n# Process Cabin Column to show number of cabins passenger has\ncabin <- full$Cabin\nn = length(cabin)\nfor(i in 1:n){\n  if(nchar(cabin[i]) == 0){\n    cabin[i] = 0\n  } else{\n    s = strsplit(cabin[i],\" \")\n    cabin[i] = length(s[[1]])\n  }\n} \ntable(cabin)\n\nfull$n_cabin <- as.numeric(cabin)\n\nggplot(data=full, aes(y = n_cabin, x=Age, colour=as.factor(Survived))) +\n  geom_point()\n\n\n### Explore Fare data\nfull[which(is.na(full$Fare)==TRUE),]\n\n#Plot densitty for fares from passensgers in Class 3 that embarked from S\nggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n       aes(x = Fare)) +\n  geom_density(fill = '#99d6ff', alpha=0.4) + \n  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n             colour='red', linetype='dashed', lwd=1)\n\n\n#Set missing fare for Passenger 1044 to $8.05\nfull$Fare[which(full$PassengerId == 1044)] = median(full[full$Pclass == '3' & full$Embarked == 'S', 'Fare'], na.rm=TRUE)\n\n\n# process embarked column\nembarked <- full$Embarked\nn = length(embarked)\nfor(i in 1:n){\n  if(embarked[i] != \"S\" && embarked[i] != \"C\" && embarked[i] != \"Q\"){\n    embarked[i] = \"S\"\n  }\n}\ntable(embarked)\n\nfull$Embarked <- embarked\n\n# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1\n\n\n\n\n# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)\n\n\n# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)\n\n\n# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                       function(x) strsplit(x, split = '[,.]')[[1]][1])\n\n\n## Data Analysis\n#visualize the relationship between Sex & Age & survival\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(x = Sex, fill = factor(Survived))) +\n  geom_bar(stat='count') +\n  theme_few()\n\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(x = Sex, fill = factor(Survived))) +\n  geom_histogram(stat='count') +\n  theme_few()\n\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(x = Sex, y=Age, colour = factor(Survived))) +\n  geom_point() +\n   theme_few()\n\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(Age,fill = factor(Survived))) +\n  geom_histogram()\n\n\n#visualize the relationship between family size & survival\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size') +\n  theme_few()\n\n\n\n# calculate survival rate by Sex\ntapply(train_data$Survived,train_data$Sex,mean)\n\n\n# make a histogram of title v.s survival\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(Title,fill = factor(Survived))) +\n  geom_histogram(stat = \"count\")\n\n\n# survival rate by Title\ntrain <- full[which(is.na(full$Survived) ==FALSE),]\ntapply(train$Survived,train$Title,mean)\n\n# make a histogram\nggplot(train, aes(Pclass,fill = factor(Survived))) +\n  geom_histogram(stat = \"count\")\n\n\n# calculate survival rate\ntapply(train$Survived,train$Pclass,mean)\n\n\n# histogram of Fsize\nggplot(train, aes(Fsize,fill = factor(Survived))) +\n  geom_histogram(stat = \"count\")\n\ntapply(train$Survived,train$Fsize,mean)\n\n\n# create histogram\nggplot(full[which(is.na(full$Survived) ==FALSE),], aes(n_cabin,fill = factor(Survived))) +\n  geom_histogram(stat = \"count\")\n\n\n# calculate survival rate\ntapply(train$Survived,train$n_cabin,mean)\n\n# make a histogram\nggplot(train, aes(Fare,fill = factor(Survived))) +\n  geom_histogram()\n\n\n####   MODEL BUILDING ######\nnew_train <- full[which(is.na(full$Survived) ==FALSE),]\nfit_svm <- ksvm(Survived~ Age + Fare + Sex + Embarked + Fsize + Title\n                 + Pclass, data=new_train,\n                type = \"C-svc\", # Use C-classification method\n                kernel = \"vanilladot\", # Use simple linear kernel\n                C = 100,\n                scaled=TRUE) # have ksvm scale the data for you\n\n\n# predicted result of regression\nsvm.fitted = predict(fit_svm, new_train[,-1])\n\nans_svm = rep(NA, length(svm.fitted))\nfor(i in 1:length(ans_svm)){\n  ans_svm[i] = as.integer(svm.fitted[[i]]) \n}\n# check result\nmean(ans_svm == train$Survived)\ntable(ans_svm)\n\n\n# SVM\na = sum(ans_svm ==1 & train$Survived == 1)\nb = sum(ans_svm ==1 & train$Survived == 0)\nc = sum(ans_svm ==0 & train$Survived == 1)\nd = sum(ans_svm ==0 & train$Survived == 0)\ndata.frame(a,b,c,d)\n\n\n\n#####  CONSTRUCT TESTING DATA FRAME\nnew_test <- full[which(is.na(full$Survived) ==TRUE),] %>%\n  select(-c(Name, SibSp, Parch, Ticket, Cabin, ,n_cabinSurname, Survived))\n  #select(-c(Name, SibSp, Parch, Ticket, Survived))\n\n# make prediction\nsvm_predict = predict(fit_svm,newdata = new_test[,-1])\nans_svm_predict = rep(NA,nrow(new_test))\nfor(i in 1:nrow(new_test)){\n  #ans_svm_predict[i] = as.integer(svm_predict[[i]]) - 1\n  ans_svm_predict[i] = as.integer(svm_predict[[i]])\n}\ntable(ans_svm_predict)\n\n\nd<-data.frame(PassengerId = new_test$PassengerId, Survived = ans_svm_predict) \nwrite.csv(d,file = \"TitanicResult.csv\",row.names = F)\n\n\n",
    "created" : 1510711905888.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "811530588",
    "id" : "8A444B47",
    "lastKnownWriteTime" : 1511838980,
    "last_content_update" : 1511838980008,
    "path" : "~/ShinyApps/Kaggle/Titanic_SVM.R",
    "project_path" : "Titanic_SVM.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}